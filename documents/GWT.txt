///////////////////////////////////////////////////////////////////////////////
// Original commands from the game (alphabetical) - Edited to incorporate my additions.

GO Scenario #1: No direction specified
   GIVEN : "go" is entered 
    WHEN : 
    THEN : appropriate message is displayed

GO Scenario #2: No exit exists
   GIVEN : "go direction" is entered 
    WHEN : there is no exit in the given direction
    THEN : appropriate message is displayed (no door)

GO Scenario #3: Exit exists, door is locked
   GIVEN : "go direction" is entered
    WHEN : there is an exit in the given direction
     and : the exit is locked
    THEN : appropriate message is displayed (door is locked)
 
GO Scenario #4: Exit exists, door is unlocked
	GIVEN : "go direction" is entered
    WHEN : there is an exit in the given direction
     and : the exit is unlocked
    THEN : player's current room is changed to the room in the given direction
     and : the current room's points are added to the player's score
     and : player's current location is displayed
     
 GO Scenario #4: Exit exists, door is unlocked, and you walked into North/Main/South Moving Stairs
   GIVEN : "go direction" is entered
    WHEN : there is an exit in the given direction
     and : the exit is unlocked
    THEN : player's current room is changed to the room in the given direction
     and : the current room's points are added to the player's score
     and : player's current location is displayed
     and : random numbers are generated to determine what exits open/close

HELP Scenario #1:
   GIVEN : "help" is entered
    WHEN : 
    THEN : available commands are displayed

QUIT Scenario #1:
   GIVEN : "quit" is entered
    WHEN : 
    THEN : appropriate message is displayed (thanks for playing)
     and : program quits



///////////////////////////////////////////////////////////////////////////////
// Commands added in Stage 2 (alphabetical)

BACK Scenario #1: no previous room
   GIVEN : "back" is entered
    WHEN : there is no previous room
    THEN : appropriate message is displayed (cannot go back)

BACK Scenario #2: there is a previous room
   GIVEN : "back" is entered
    WHEN : there is a previous room
    THEN : player's current location is changed to the previous location
     and : player's current location is displayed 

LOOK Scenario #1:
   GIVEN : "look" is entered
    WHEN : 
    THEN : player's current location is displayed

STATUS Scenario #1:
   GIVEN : "status" is entered
    WHEN : 
    THEN : current number of turns is displayed 
     and : player's current score is displayed
     and : player's current location is displayed




///////////////////////////////////////////////////////////////////////////////
// Commands added in Stage 3 (alphabetical)

DROP Scenario #1: No item specified
   GIVEN : "drop" is entered
    WHEN : 
    THEN : appropriate message is displayed (which item?)

DROP Scenario #2: Player does not have the specified item
   GIVEN : "drop item" is entered
    WHEN : player does not have the specified item
    THEN : appropriate message is displayed (you don't have it)

DROP Scenario #3: Player has the specified item
   GIVEN : "drop item" is entered
    WHEN : player has the specified item
    THEN : "item" is removed from the player's inventory
     and : "item" is added to the current room
     and : appropriate message is displayed (you dropped the item)



EXAMINE Scenario #1: No item specified
   GIVEN : "examine" is entered
    WHEN : 
    THEN : appropriate message is displayed (which item?)

EXAMINE Scenario #2: Specified item does not exist
   GIVEN : "examine item" is entered
    WHEN : specified item is not in the room
     and : specified item is not in player's inventory
    THEN : appropriate message is displayed (no such item)

EXAMINE Scenario #3: Specified item does exist
   GIVEN : "examine item" is entered
    WHEN : specified item is in the room or in the player's inventory
    THEN : complete description of the item is displayed including the item's name, description and (optionally) the weight.



INVENTORY Scenario #1:
   GIVEN : "inventory" is entered
    WHEN : 
    THEN : a list of the items in the players inventory is displayed



TAKE Scenario #1: no item specified
   GIVEN : "take" is entered
    WHEN : 
    THEN : appropriate message is displayed (take what?)

TAKE Scenario #2: specified item does not exist
   GIVEN : "take item" is entered
    WHEN : specified item is not in the current room
    THEN : appropriate message is displayed (no such item)
    
TAKE Scenario #3: specified item is too heavy to lift
   GIVEN : "take item" is entered
    WHEN : specified item is in the current room
     and : specified item by itself exceeds maximum carrying weight
    THEN : appropriate message is displayed (too heavy to lift)

TAKE Scenario #4: specified item makes inventory too heavy
   GIVEN : "take item" is entered
    WHEN : specified item is in the current room
     and : adding specified item to inventory weight exceeds maximum carrying weight
    THEN : appropriate message is displayed (carrying too much)

TAKE Scenario #5: specified item is fly, player does not have net
   GIVEN : "take item" is entered
    WHEN : specified item is in the current room
     and : adding specified item to inventory weight does not exceed maximum carrying weight
     and : item is fly, player does not have net
    THEN : appropriate message is displayed (need something to catch fly with)

TAKE Scenario #6: specified item is taken
   GIVEN : "take item" is entered
    WHEN : specified item is in the current room
     and : adding specified item to inventory weight does not exceed maximum carrying weight
     and : if item is fly, player has net
    THEN : item is removed from the current room
     and : item is added to the player's inventory
     and : appropriate message is displayed (you took the item)



///////////////////////////////////////////////////////////////////////////////
// Commands added in Stage 4 (alphabetical)

GO Scenario #4: Door is locked
   GIVEN : "go direction" is entered
    WHEN : there is an exit in the given direction
     and : that exit is locked
    THEN : appropriate message is displayed (door is locked)



LOCK Scenario #1: No direction specified
   GIVEN : "lock" is entered
    WHEN : 
    THEN : appropriate message is displayed (lock what?)

LOCK Scenario #2: No Door
   GIVEN : "lock direction" is entered
    WHEN : there is no door in that direction
    THEN : appropriate message is displayed (no door)

LOCK Scenario #3: Door is locked
   GIVEN : "lock direction" is entered
    WHEN : door in "direction" is locked
    THEN : appropriate message is displayed (door is already locked)

LOCK Scenario #4: Door cannot be locked
   GIVEN : "lock direction" is entered
    WHEN : door in "direction" has no associated key
    THEN : appropriate message is displayed (door cannot be locked)

LOCK Scenario #5: Door can be locked
   GIVEN : "lock direction" is entered
    WHEN : door in "direction" is unlocked
     and : door in "direction" can be locked
    THEN : user is prompted for key

LOCK Scenario #6: Player does not have the key
   GIVEN : "lock direction" had been entered
     and : user has been prompted for specific key
    WHEN : player does not have specific key in inventory
    THEN : appropriate message is displayed (you do not have it)

LOCK Scenario #7: Incorrect key specified
   GIVEN : "lock direction" had been entered
     and : user has been prompted for specific key
    WHEN : player's inventory has the specific key
     and : specified key is not the correct key
    THEN : appropriate message is displayed (wrong key)
 
LOCK Scenario #8: Correct key specified
   GIVEN : "lock direction" had been entered
     and : user has been prompted for specific key
    WHEN : player's inventory has the specific key
     and : specified key is the correct key
    THEN : door in "direction" is locked
     and : appropriate message is displayed (you locked it)
 




PACK Scenario #1: No item specified
   GIVEN : "pack" is entered
    WHEN : 
    THEN : appropriate message is displayed (pack what?)

PACK Scenario #2: Item is not available
   GIVEN : "pack item" is entered
    WHEN : item is NOT in the current room
     and : item is NOT in the players inventory
    THEN : appropriate message is displayed (you don't have it)

PACK Scenario #3: Item is too heavy
   GIVEN : "pack item" is entered
    WHEN : item is in the current room
     and : item is heavier than player's carrying capacity
    THEN : appropriate message is displayed (too heavy)

PACK Scenario #4: Item is available
   GIVEN : "pack item" is entered
    WHEN : item is in the current room
      or : item is in the player's inventory
     and : there are no weight problems
    THEN : user is prompted for the container to put it in

PACK Scenario #5: Container is not available
   GIVEN : "pack item" had been entered
     and : user has been prompted for the container
    WHEN : container is NOT in the current room
     and : container is NOT in the player's inventory
    THEN : appropriate message is displayed (you don't see the container)

PACK Scenario #6: Container is NOT a container 
   GIVEN : "pack item" had been entered
     and : user has been prompted for the container
    WHEN : container is in the current room
      or : container is in the player's inventory
     and : container is not really a container
    THEN : appropriate message is displayed (that's not a container)

PACK Scenario #7: Container is a container, but item too heavy
   GIVEN : "pack item" had been entered
     and : user has been prompted for the container
    WHEN : item is in the current room
     and : container is in the player's inventory
     and : item would put player over their inventory weight limit
    THEN : appropriate message is displayed (carrying too much)

PACK Scenario #8: Packing is possible
   GIVEN : "pack item" had been entered
     and : user has been prompted for the container
    WHEN : container is in the current room
      or : container is in the player's inventory
     and : container is really a container
     and : there are no weight problems
    THEN : item is removed from the current room
      or : item is removed from the player's inventory
     and : item is added to the container
     and : appropriate message is displayed (you packed it)





UNLOCK Scenario #1: No direction specified
   GIVEN : "unlock" is entered
    WHEN : 
    THEN : appropriate message is displayed (unlock what?)

UNLOCK Scenario #2: No door in that direction
   GIVEN : "unlock direction" is entered
    WHEN : there is no door in the "direction"
    THEN : appropriate message is displayed (there is no door)

UNLOCK Scenario #3: Direction is specified and is not locked
   GIVEN : "unlock direction" is entered
    WHEN : there is a door in the "direction"
     and : door in "direction" is NOT locked
    THEN : appropriate message is displayed (door is not locked)

UNLOCK Scenario #4: Direction is specified and is locked
   GIVEN : "unlock direction" is entered
    WHEN : there is a door in the "direction"
     and : door in "direction" is locked
    THEN : user is prompted for key

UNLOCK Scenario #5: Player missing specified key
   GIVEN : "unlock direction" had been entered
     and : user has been prompted for specific key
    WHEN : player's inventory does NOT have the specific key
    THEN : appropriate message is displayed (you don't have it)

UNLOCK Scenario #6: Incorrect key
   GIVEN : "unlock direction" had been entered
     and : user has been prompted for specific key
    WHEN : player's inventory has the specific key
     and : specified key is incorrect item
    THEN : appropriate message is displayed (that doesn't fit)

UNLOCK Scenario #7: Correct key
   GIVEN : "unlock direction" had been entered
     and : user has been prompted for specific key
    WHEN : player's inventory has the specific key
     and : specified key is the correct object
    THEN : door in "direction" is unlocked
     and : appropriate message is displayed (you unlocked it)
 




UNPACK Scenario #1: No container specified
   GIVEN : "unpack" is entered
    WHEN : 
    THEN : appropriate message is displayed (unpack what?)

UNPACK Scenario #2: Specified container is not in the current room
   GIVEN : "unpack container" is entered
    WHEN : specified container is NOT in the current room
     and : specified container is NOT in the players inventory
    THEN : appropriate message is displayed (you don't see it)

UNPACK Scenario #3: Specified item is not a container
   GIVEN : "unpack container" is entered
    WHEN : specified container is in the current room
      or : specified container is in the player's inventory
     and : specified container is NOT a container
    THEN : appropriate message is displayed (that's not a container)

UNPACK Scenario #4: Container is OK
   GIVEN : "unpack container" is entered
    WHEN : specified container is in the current room
      or : specified container is in the player's inventory
     and : specified container is a container
    THEN : user is prompted for an item to unpack

UNPACK Scenario #5: Item is NOT in container
   GIVEN : "unpack container" had been entered
     and : user has been prompted for the item to unpack
    WHEN : item to unpack is NOT in the container
    THEN : appropriate message is displayed (you don't find it)

UNPACK Scenario #6: Item is in container but too heavy
   GIVEN : "unpack container" had been entered
     and : user has been prompted for the item to unpack
    WHEN : item to unpack is in the container
     and : container was in the current room
     and : item would make the player exceed his weight limit
    THEN : appropriate message is displayed (you are already carrying too much)

UNPACK Scenario #7: Item can be unpacked
   GIVEN : "unpack container" had been entered
     and : user has been prompted for the item to unpack
    WHEN : item to unpack is in the container
     and : there is no weight problem
    THEN : item to unpack is removed from the container
     and : item to unpack is added to the player's inventory
     and : appropriate message is displayed (you unpack it)



///////////////////////////////////////////////////////////////////////////////
// Commands added for Stage 6: Buildable Items Special Feature (alphabetical)

BUILD Scenario #1: No item is specified
	GIVEN: "build" is entered
	WHEN: 
	THEN: appropriate message is displayed (build what?)
	
BUILD Scenario #2: Item is not a buildable item
	GIVEN: "build item" is entered
	WHEN: item is NOT a buildable item
	THEN: appropriate message is displayed (this is not a buildable item!)
	
BUILD Scenario #3: Item is buildable, ingredient(s) are unavailable
	GIVEN: "build item" is entered
	WHEN: item is a buildable item
	and: a necessary ingredient is not in the current room
	and: a necessary ingredient not in the player's inventory
	THEN: appropriate message is displayed (you are missing an ingredient)
	
BUILD Scenario #4: Item is buildable, all ingredients are available
	GIVEN: "build item" is entered
	WHEN: item is a buildable item
	and: necessary ingredients are in current room
	or: necessary ingredients are in player's inventory
	THEN: build the item
	and: remove ingredients from room
	and: remove ingredients from inventory
	and: display appropriate message (item has been built)





DISMANTLE Scenario #1: No item is specified
	GIVEN: "dismantle" is entered
	WHEN:
	THEN: appropriate message is displayed (dismantle what?)
	
DISMANTLE Scenario #2: Item is not in the current room
	GIVEN: "dismantle item" is entered
	WHEN: item is not in the current room
	and: item is not in the player's inventory
	THEN: appropriate message displayed (you don't see this item anywhere)
	
DISMANTLE Scenario #3: Item is not a buildable item
	GIVEN: "dismantle item" is entered
	WHEN: item is in current room
	or: item is in player's inventory
	and: item is not a buildable item
	THEN: appropriate message is displayed (this item cannot be dismantled)
	
DISMANTLE Scenario #4: Item is a buildable item, item cannot be dismantled
	GIVEN: "dismantle item" is entered
	WHEN: item is in current room
	or: item is in player's inventory
	and: item is a buildable item
	and: item cannot be dismantled
	THEN: appropriate message is displayed (you can't take this apart after assembly)
	
DISMANTLE Scenario #5: Item can be dismantled
	GIVEN: "dismantle item" is entered
	WHEN: item is in current room
	or: item is in player's inventory
	and: item is a buildable item
	and: item can be dismantled
	THEN: remove item from inventory
	or: remove item from current room
	and: add ingredients to inventory
	or: add ingredients to current room
	and: appropriate message is displayed (item has been dismantled)
	
	
	
	
	
DRINK Scenario #1: No item is specified
	GIVEN: "drink" is entered
	WHEN:
	THEN: appropriate message is displayed (drink what?)
	
DRINK Scenario #2: Player does not have item
	GIVEN: "drink item" is entered
	WHEN : item is not in player's inventory
	 and : item is not in current room
	THEN : appropriate message is displayed (you don't see that item)
	
DRINK Scenario #3: Player has item, item cannot be drank
	GIVEN: "drink item" is entered
	WHEN : item is in player's inventory
	  or : item is in current room
	THEN : appropriate message is displayed (you can't drink that)
	
DRINK Scenario #4: Player has item, item can be drank
	GIVEN: "drink item" is entered
	WHEN : item is in player's inventory
	  or : item is in current room
	THEN : item is removed from inventory
	 and : message is printed (you drank item)
	
	
	
	
	
EAT Scenario #1: No item is specified
	GIVEN: "eat" is entered
	WHEN:
	THEN: appropriate message is displayed (eat what?)
	
EAT Scenario #2: Player does not have item
	GIVEN: "eat item" is entered
	WHEN : item is not in player's inventory
	 and : item is not in current room
	THEN : appropriate message is displayed (you don't see that item)
	
EAT Scenario #3: Player has item, item cannot be eaten
	GIVEN: "eat item" is entered
	WHEN : item is in player's inventory
	  or : item is in current room
	THEN : appropriate message is displayed (you can't eat that)
	
EAT Scenario #4: Player has item, item can be eaten
	GIVEN: "eat item" is entered
	WHEN : item is in player's inventory
	  or : item is in current room
	THEN : item is removed from inventory
	 and : message is printed (you ate item)





UP Scenario #1: The player does not have a broomstick
	GIVEN: "up" is entered
	WHEN : broomstick is not in player's inventory
	 and : broomstick is not in the current room
	THEN : appropriate message is displayed (no broomstick)
	
UP Scenario #2: Player has broomstick
	GIVEN: "up" is entered
	WHEN : broomstick is in player's inventory
	  or : broomstick is in the current room
	THEN : appropriate message is displayed (you are flying)
	 and : exits requiring flying are unlocked





CAST Scenario #1: Player does not have wand
	GIVEN: "cast" is entered
	  or : "cast spell" is entered
	WHEN : player does not have wand in inventory
	THEN : appropriate message is displayed (played does not have wand)
	
CAST Scenario #2: No spell is specified
	GIVEN: "cast" is entered
	WHEN: player has wand
	THEN: appropriate message is displayed (cast what?)
	
CAST Scenario #3: Spell is not a valid spell
	GIVEN: "cast spell" is entered
	WHEN: player has wand
	and: spell is not a valid spell, as specified in the spell book
	THEN: appropriate message is printed (You don't know this spell)

CAST Scenario #4: Spell is a valid spell, player is in a room where the spell has no effect
	GIVEN: "cast spell" is entered
	WHEN: player has wand
	and: spell is a valid spell
	and: that spell does not has effect in the current room
	THEN: appropriate message is printed (no effect)
	
CAST Scenario #5: Spell is a valid spell, spell has an effect
	GIVEN: "cast spell" is entered
	WHEN: player has wand
	and: spell is a valid spell
	and: that spell has an effect in the current room
	THEN: message is displayed (spell worked)
	and: the appropriate changes are made
	
	
